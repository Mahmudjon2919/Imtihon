1.SAVOL int butun sonlarni qabul qiladi. misol  (1, 2, 3)
float                               misol (2.2, 4.5, 5.0)
string: str so'zlarni qabul qiladi.  ("salom", "hello", "World")
list  :                             [33, "Hello", 55.4]
bool:  True va False qiymatlarni qabul qiladi.
dictionairs dict               ("mckey":"value")
2.SAVOL and mantiqiy ko'paytirish amali  True=1, False=0,  1 and 0 = 0;  1 and 1 = 1; 0 and 0 =0;
or mantiqiy bog'lash amali           1 or 1 = 1;  1 or 0 = 1; 0 or 0 = 0;
Not mantiqiy inkor amali       not True = False; not False = True;
3.SAVOL Git dasturchi ozi yozgan kodlardagi o'zgarishlarni ko'rish boshqalar bilan hamkorlik qilishda loyiha tarixini kuzatishda  ishlatiladi.
git clon, git init, git add, git commit, git push.
4.SAVOL
init bu konstruktor. uning asosiy maqsadi  obektning o'zgaruvchilaarni ishga tushirish.
class man:
  def __init__(self, name, age):
    self.name = name
    self.age = age
my_man = man("Nodir", 30)

print(f"Name: {my_man.name}")
print(f"Age: {my_man.age}")
5.SAVOL Mavjud class lardan xususiytalar va funksiyalarni meros qilib olishga imkon beradi.
Yagona meros:
Subclass bitta ota-sinfdan meros bo'lib o'tadi.
Kichik sinfga xos yangi atributlar va usullarni qo'shishi mumkin.
class Animal:

  def __init__(self, name):
    self.name = name

  def make_sound(self):
    print("Generic animal sound")

class Dog(Animal):

  def __init__(self, name, breed):
    super().__init__(name)
    self.breed = breed

  def bark(self):
    print(f"{self.name}, the {self.breed}, barks: Woof!")
my_animal = Animal("Creature")
my_dog = Dog("Buddy", "Bobik" "Retriever")

my_animal.make_sound()
my_dog.make_sound()
my_dog.bark()
Ko'p meros:
Subclass bir nechta ota-sinflardan meros bo'lib o'tadi.
Bu turli sinflardagi funktsiyalarni birlashtirish uchun foydali, ammo bu murakkablikka olib kelishi mumkin

class transport:

  def __init__(self, brand):
    self.brand = brand

  def identify(self):
    print(f"This is a {self.brand} vehicle.")

class HasEngine:

  def __init__(self, engine_type):
    self.engine_type = engine_type

  def start_engine(self):
    print(f"Starting the {self.engine_type} engine.")

class Motorcycle(transport, HasEngine):

  def __init__(self, brand, engine_type):
    super().__init__(brand)
    HasEngine.__init__(self, engine_type)

  def ride(self):
    print(f"Riding the {self.brand} motorcycle.")

my_motorcycle = Motorcycle("Ducati", "V-Twin")

my_motorcycle.identify()
my_motorcycle.start_engine()
my_motorcycle.ride()


